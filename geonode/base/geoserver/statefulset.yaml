apiVersion: v1
kind: Service
metadata:
  name: geoserver
  labels:
    app: geonode
    run: geoserver
spec:
  type: ClusterIP
  selector:
    app: geonode
    run: geoserver
  ports:
  - name: geoserver
    port: 8080
    protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geoserver
spec:
  selector:
    matchLabels:
      app: geonode
      run: geoserver
  serviceName: "geoserver"
  replicas: 1
  template:
    metadata:
      labels:
        app: geonode
        run: geoserver
    spec:
      terminationGracePeriodSeconds: 3
      initContainers:
      - image: geonode/geoserver_data:2.18.2
        name: geonode-geoserver-init-data-directory
        command: [sh, -exec]
        args:
          - |
            if ls -1A /mnt/geoserver_data | fgrep -v 'geonode' | read q; then
              echo "geoserver directory already filled"
              ls -la /mnt/geoserver_data
            else
              cp -av /geoserver_data/data/* /mnt/geoserver_data/ && ls -la /mnt/geoserver_data/
              sed 's|<stdOutLogging>false</stdOutLogging>|<stdOutLogging>true</stdOutLogging>|' \
              -i /mnt/geoserver_data/logging.xml
              set the clientId
              sed "s|<cliendId>.*</cliendId>|<cliendId>${OAUTH2_CLIENT_ID}</cliendId>|g" \
              -i /mnt/geoserver_data/security/filter/geonode-oauth2/config.xml
              set the clientSecret
              sed "s|<clientSecret>.*</clientSecret>|<clientSecret>${OAUTH2_CLIENT_SECRET}</clientSecret>|g" \
              -i /mnt/geoserver_data/security/filter/geonode-oauth2/config.xml
            fi              # enable logging to STD_OUT
        envFrom: 
        - configMapRef:
            name: geoserver-config
        volumeMounts:
        - name: geoserver-data-dir-storage
          mountPath: /mnt/geoserver_data/

      containers:
      - image: geonode/geoserver:2.18.2
        name: geoserver
        env:
          - name: PUBLIC_PORT
            value: "8080"
          - name: ENABLE_JSON
            value: "true"
          - name: outFormat
            value: text/javascript
          - name: GEOSERVER_JAVA_OPTS
            value: |
              -Djava.awt.headless=true 
              -Xms2G 
              -Xmx4G 
              -XX:PerfDataSamplingInterval=500 
              -XX:SoftRefLRUPolicyMSPerMB=36000 
              -XX:-UseGCOverheadLimit 
              -XX:+UseConcMarkSweepGC 
              -XX:+UseParNewGC 
              -XX:ParallelGCThreads=4 
              -Dfile.encoding=UTF8 
              -Djavax.servlet.request.encoding=UTF-8 
              -Djavax.servlet.response.encoding=UTF-8 
              -Duser.timezone=GMT 
              -Dorg.geotools.shapefile.datetime=false 
              -DGEOSERVER_CSRF_DISABLED=true 
              -DPRINT_BASE_URL=http://geoserver:8080/geoserver/pdf
        ports:
        - containerPort: 8080
          name: geoserver
        volumeMounts:
        - name: django-statics-storage
          mountPath: /mnt/volumes/statics
        - name: geoserver-data-dir-storage
          mountPath: /geoserver_data/data
        - name: geoserver-data-storage
          mountPath: /data
      volumes:
      - name: django-statics-storage
        persistentVolumeClaim:
          claimName: claim-django-statics
      - name: geoserver-data-dir-storage
        persistentVolumeClaim:
          claimName: claim-geoserver-data-dir
      - name: geoserver-data-storage
        persistentVolumeClaim:
          claimName: claim-geoserver-data
  volumeClaimTemplates:
  # - metadata:
  #     name: geoserver-data-dir-storage
  #   spec:
  #     volumeName: pv-geoserver-data-dir
  #     storageClassName: local-storage
  #     resources:
  #       requests:
  #         storage: 2Gi
  #     accessModes:
  #       - ReadWriteMany
  # - metadata:
  #     name: geoserver-data-storage
  #   spec:
  #     volumeName: pv-geoserver-data
  #     storageClassName: local-storage
  #     resources:
  #       requests:
  #         storage: 2Gi
  #     accessModes:
  #       - ReadWriteMany