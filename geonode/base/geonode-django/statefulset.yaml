apiVersion: v1
kind: Service
metadata:
  name: django
  labels:
    run: django
spec:
  selector:
    run: django
  type: ClusterIP
  ports:
    - name: http-alt
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: http-alt2
      protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: django
spec:
  selector:
    matchLabels:
      app: geonode
      run: django

  serviceName: django
  replicas: 1
  template:
    metadata:
      labels:
        app: geonode
        run: django
    spec:
      terminationGracePeriodSeconds: 3
      initContainers:
      - image: curlimages/curl:7.78.0
        name: waiting-for-database
        command:
         - sh
         - "-c"
         - |
          #!/bin/sh
          a=0;
          while [[ $a != 52 ]] ; do  
            curl -v -sL -I http://$GEONODE_POSTGIS_CLUSTER_SERVICE_HOST:$GEONODE_POSTGIS_CLUSTER_SERVICE_PORT/ping
            a=$?
            sleep 1
          done        
          echo "postgis-cluster is up"
          exit 0

          EOF
      containers:
      - image: mwall2bitflow/geonode:3.1.1
        name: genode-django
        command: ["/bin/bash"]
        args: ["/usr/src/geonode/entrypoint.sh","uwsgi", "--ini", "/usr/src/geonode/uwsgi.ini","--log-master"]
        readinessProbe:
          httpGet:
            port: 8001
          initialDelaySeconds: 10
          timeoutSeconds: 2   
        env:
        # GEOSERVER SECRETS
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: geoserver-login
              key: admin_user
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: geoserver-login
              key: admin_password
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: geoserver-login
              key: admin_emailaddr

        # patroni login credentials from
        # {username}.{team}-{clustername}.credentials.postgresql.acid.zalan.do
        # requires to be variables
        # geogenode database
        - name: DATABASE_HOST
          value: "$(GEONODE_POSTGIS_CLUSTER_SERVICE_HOST)"
        - name: DATABASE_PORT
          value: "$(GEONODE_POSTGIS_CLUSTER_SERVICE_PORT)"

        # Postgres superuser
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres.geonode-postgis-cluster.credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres.geonode-postgis-cluster.credentials
              key: password
        
        # TODO REMOVE THIS FROM wait-for-databases.sh
        #
        # DATABASE CREDENTIALS USED BY DJANGO
        #
        # geonode database/user
        - name: GEONODE_DATABASE
          valueFrom:
            secretKeyRef:
              name: geonode.geonode-postgis-cluster.credentials
              key: username
        # geonode user password
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: geonode.geonode-postgis-cluster.credentials
              key: password
        - name: DATABASE_URL
          value: "postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)"        
        #
        # GEODATABASE CREDENTIALS USED BY GEOSERVER
        #
        # geogeonode database/user
        - name: GEONODE_GEODATABASE
          valueFrom:
            secretKeyRef:
              name: geogeonode.geonode-postgis-cluster.credentials
              key: username
        # geonode user password
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: geogeonode.geonode-postgis-cluster.credentials
              key: password
        - name: GEODATABASE_URL
          value: "postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)"
      

        # Other ENV
        - name: SITEURL
          value: http://geonode
        - name: IS_CELERY
          value: "False"
        envFrom:
        - configMapRef:
            name: django-config
        - configMapRef:
            name: geoserver-config
        - configMapRef:
            name: nginx-config
        - configMapRef:
            name: rabbitmq-config        
        ports:        
        - containerPort: 8000
        - containerPort: 8001
        volumeMounts:
        - name: django-statics-storage
          mountPath: /mnt/volumes/statics
        - name: geoserver-data-dir-storage
          mountPath: /geoserver_data/data
        - name: geoserver-data-storage
          mountPath: /data
        # Files
        - name: entrypoint-sh
          mountPath: "/usr/src/geonode/entrypoint.sh"
          subPath: entrypoint.sh
          readOnly: true
        - name: uwsgi-ini
          mountPath: "/usr/src/geonode/uwsgi.ini"
          subPath: uwsgi.ini
          readOnly: true
        - name: settings-py
          mountPath: "/usr/src/geonode/geonode/settings.py"
          subPath: settings.py
          readOnly: true
          
      volumes:
      - name: django-statics-storage
        persistentVolumeClaim:
          claimName: claim-django-statics
      - name: geoserver-data-dir-storage
        persistentVolumeClaim:
          claimName: claim-geoserver-data-dir
      - name: geoserver-data-storage
        persistentVolumeClaim:
          claimName: claim-geoserver-data
      - name: entrypoint-sh
        configMap:
          name: entrypoint-sh-configmap
          items:
          - key: entrypoint.sh
            path: "entrypoint.sh"
      - name: uwsgi-ini
        configMap:
          name: uwsgi-ini-configmap
          items:
          - key: uwsgi.ini
            path: "uwsgi.ini"
      - name: settings-py
        configMap:
          name: settings-py-configmap
          items:
          - key: settings.py
            path: "settings.py"